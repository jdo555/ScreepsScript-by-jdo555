PLEASE NOTE THAT THESE NOTES ARE DISORGANIZED AND MAY NOT BE UPDATED VERY FREQUENTLY (MEANING THEY COULD BECOME IRRELEVANT).
SOME OF THESE NOTES WERE TAKEN STRAIGHT OUT OF THE CODE, AND SOME ARE MERELY TO-DO NOTES OR IDEAS TO POTENTIALLY IMPLEMENT.
TO UNDERSTAND THE SCRIPT, PLEASE CONSULT THE ACTUAL CODE, ITS COMMENTS, AND THE README.

//// create some code for labs, factories, and observers
//// improve the terminal section (which is currently completely manual)
//// continue working on the registration object...
//// continue working on the method checkBaseStructuresAgainstRoomMemory...
//// continue working on different aspects of automating base building...
//// consider creating a dynamic base-building process that fills out room memory when it is executed for the first time in a base (at execution)
//// ... the dynamic process should be partly template-based so that the central structures and towers have a definite (though perhaps somewhat varied) location and relation
//// a single source base will need a distributor and a towerCharger from controller level 4...
//// fortifications are not completed very cleanly due to no fortifier being spawned (FIXED [probably]), and due to some construction sites overlapping at clvl 5 lvl-up time
//// the build order for construction sites should get some extra attention... towers should be built before new extensions (for example) (is this FIXED???)

//// AUTOMATION ...
//// dropMiners completely work... except...
//// linkMiners completely work... except...
//// EXCEPT that ... their structure-registration may not happen immediately due to how Base.constructionSitesObject is used, since these miners do not use this class variable
//// ... this is why the linkMiner would not work immediately after finishing the link, because there were always other construction sites being worked on that preceded it...
//// ... for the dropMiner, however, his site was the only site existing at the time and thus had to be the site held onto, thus it got registered immediately
//// rampart-sites can (and do) get blocked by structure construction-sites... (this first happens at controller level 5, particularly with the newly built link)

//// change how towers behave when bases are under attack
//// ... towers should stop attacking targets after finding that they cannot be defeated and then switch to defense, so that they simply repair the attacked target
//// ... what if there are multiple attacked targets? also, consider how towers might preserve energy in preparation for a breakthrough, perhaps
//// ... if a wall or rampart is broken, switch back to offense... but maybe have some kind of check that may put them back on defense depending on the circumstances...
//// ... towers should probably prioritize offense if they themselves are under attack...
//// when towers are to attack, could look at health of target to restrict overkill targeting (would need to be handled carefully...)
//// maybe create a way to make tower-repairs very active...
//// consider adding code to make towers heal units
//// consider how to improve the attack priorities section
//// try to make sure that the code will not crash when bases are lost, structures destroyed, etc...
//// create some code for starting safe mode in early level bases
//// continue balancing the controller link (in both the overseer and link sections)
//// continue working on the mineral stuff...
//// ... indicate which base is the main base
//// ... create a role to be used only in the main base
//// ... consider how involved a power creep might be in the entire process
//// ... have all other bases pass a certain amount of resources to the main base, for use in its labs
//// ...... consider the use of having a rotation of some kind take place if, for example, resources pile up too much
//// continue working on the spawning function
//// ... consider creating more options for the spawn objects (such as usedSpawn, something that makes a unique count for a role, etc.)
//// ...... also, spawnOnce, to only attempt to spawn at first execution and then never again (by perhaps removing that spawn object from its array)...
//// consider setting up a function for requesting "find"s, for each appropriate role
//// ... the repairer for example would request that repairable locations be looked for
//// ... the first result of the given find type will be saved for a certain length of time, and passed as a result to each same find-request during that time.
//// consider the usefulness of creating a tick-based thing for rooms currently being explored (but not owned) wherein resources, enemies, etc. might be found...
//// consider creating some kind of class (or something) for collecting resources from adjacent rooms (with or without hostiles)...
//// improve and add more spawn condition functions, particularly those that relate to attack and defense
//// continue working on improving the code efficiency (minimizing the impact of tick-based checks, doing "find"s as infrequently as makes sense, etc...)
// !!! could add mso options that check timings so as to increase likelihood of spawning larger harvester, and decrease likelihood of spawning small harvester...
// !!!!! consider creating a special extraMemory option (used mostly for harvesters), called something like spawnTickDelay...
// ... this "delay" would be a base-dependent tick count that is reset to 0 each time ANY unit is spawned (in that base)...
// ... could be used with harvester thus...    mso(-1, "harvester", "4m2w2c", {spawnTickDelay: 0}),
// ...                                         mso(-1, "harvester", "2m1w1c", {spawnTickDelay: 750}),
// ... thereby encouraging the spawning of the larger harvester, by making it so that small harvesters only spawn when NO units have spawn at all for 750 ticks...
// ... this would prevent small harvester from spawning too numerously, by ensuring that when there is a current resource growth larger harvesters would be waited for
// ... contrarily, if there were no resource growth, then eventually a small harvester would still spawn (due to spawn resource generation) ...
// ... and thereafter resources should again be growing (assuming no interference) and the option would force waiting for the prescribed number of ticks...
// !!!!! consider creating an extraMemory option (used mostly for external workers) called something like withUniqueRoleName...
// ... this option would receive a roleName as string that must be distinct and new compared to all existing and previously used (within this execution) roleNames
// ... this option would enable spawning a new group of an already existing unit but they would then have a distinct count due to the secondary roleName...
// ... they would still function exactly the same, but could receive different memory or extraMemory allowing multiple groups of the same roleType doing very different things...
// ... ! of course, counting methods would need to be made aware of this option to ensure everything still works correctly...