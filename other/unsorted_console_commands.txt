// destroy all walls in room
{ let room = ""; for (let st of Game.rooms[room].find(FIND_STRUCTURES, {filter: {structureType: STRUCTURE_WALL}})) { st.destroy(); }}

// destroy all construction sites in room
{ let room = ""; for (let cs of Game.rooms[room].find(FIND_CONSTRUCTION_SITES)) { cs.remove(); }}

// destroy all structures in room (except Nuker)
{ let room = ""; for (let st of Game.rooms[room].find(FIND_STRUCTURES)) { if (st.structureType != STRUCTURE_NUKER) { st.destroy(); }}}

// sign controller with empty string
{ let creep = Game.getObjectById(""); creep.signController(creep.room.controller, ""); }

// sign controller with empty string, moving to it if not in range...
{ let creep = Game.getObjectById(""); if (creep.signController(creep.room.controller, "") == ERR_NOT_IN_RANGE) { creep.moveTo(creep.room.controller); }}

// clear all room-memory for a base...
delete Memory.rooms["ROOM_NAME"];

// clear error messages for a room...
Game.rooms["W48S19"].memory.errors = {};

// reset room structure memory...
Game.rooms["W48S19"].memory.roomMemorySet = false;

// reset room dropMine data for room...
Game.rooms["W48S19"].memory.dropMinesSet = false;

// reset outer fortifications (walls and manually set ramparts)...
Game.rooms["W48S19"].memory.outerFortificationsSet = false;

// reset ALL room memory...
for (roomName in Memory.rooms) { delete Memory.rooms[roomName]; }


// selling one resource on the market...
{ let myRoom = !!!; let soldResource = !!!; let minSellValue = !!!; let maxTransferCost = 2000; let allOrders = Game.market.getAllOrders({type: ORDER_BUY, resourceType: soldResource}); allOrders.sort((a,b) => b.price - a.price); for (let order of allOrders) { let transferCost = Game.market.calcTransactionCost(order.amount, myRoom, order.roomName); if ((order.amount > 0) && (order.price > minSellValue) && (transferCost < maxTransferCost)) { console.log("Attempting to sell "+order.amount+" "+order.resourceType+" at price "+order.price+" for total of "+(order.price * order.amount)+" credits, with transfer cost of "+transferCost+"..."); if (0 == Game.market.deal(order.id, order.amount, myRoom)) { console.log("DEAL SUCCESSFUL!") } else { console.log("DEAL FAILED!!!!!")} break; }}}

// buying one resource on the market...
{ let myRoom = !!!; let boughtResource = !!!; let maxCostEach = !!!; let maxQuantityPurchased = !!!; let maxTransferCost = 2000; let allOrders = Game.market.getAllOrders({type: ORDER_SELL, resourceType: boughtResource}); allOrders.sort((a,b) => a.price - b.price); for (let order of allOrders) { let purchasedQuantity = (maxQuantityPurchased > order.amount) ? order.amount : maxQuantityPurchased; let transferCost = Game.market.calcTransactionCost(purchasedQuantity, order.roomName, myRoom); if ((purchasedQuantity > 0) && (order.price < maxCostEach) && (transferCost < maxTransferCost)) { console.log("Attempting to buy "+purchasedQuantity+" "+order.resourceType+" at price "+order.price+" for total of "+(order.price * order.amount)+" credits, with transfer cost of "+transferCost+"..."); if (0 == Game.market.deal(order.id, purchasedQuantity, myRoom)) { console.log("DEAL SUCCESSFUL!") } else { console.log("DEAL FAILED!!!!!")} break; }}}
